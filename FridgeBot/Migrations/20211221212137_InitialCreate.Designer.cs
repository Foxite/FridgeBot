// <auto-generated />
using System;
using FridgeBot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FridgeBot.Migrations
{
    [DbContext(typeof(FridgeDbContext))]
    [Migration("20211221212137_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FridgeBot.FridgeEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("FridgeMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ServerId", "ChannelId", "MessageId")
                        .IsUnique();

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("FridgeBot.FridgeEntryEmote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmoteString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FridgeEntryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FridgeEntryId", "EmoteString")
                        .IsUnique();

                    b.ToTable("FridgeEntryEmote");
                });

            modelBuilder.Entity("FridgeBot.ServerEmote", b =>
                {
                    b.Property<decimal>("ServerId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("EmoteString")
                        .HasColumnType("text");

                    b.Property<int>("MaximumToRemove")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumToAdd")
                        .HasColumnType("integer");

                    b.HasKey("ServerId", "EmoteString");

                    b.ToTable("Emotes");
                });

            modelBuilder.Entity("FridgeBot.ServerFridge", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("FridgeBot.FridgeEntry", b =>
                {
                    b.HasOne("FridgeBot.ServerFridge", "Server")
                        .WithMany("FridgeEntries")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("FridgeBot.FridgeEntryEmote", b =>
                {
                    b.HasOne("FridgeBot.FridgeEntry", "FridgeEntry")
                        .WithMany("Emotes")
                        .HasForeignKey("FridgeEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FridgeEntry");
                });

            modelBuilder.Entity("FridgeBot.ServerEmote", b =>
                {
                    b.HasOne("FridgeBot.ServerFridge", "Server")
                        .WithMany("Emotes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("FridgeBot.FridgeEntry", b =>
                {
                    b.Navigation("Emotes");
                });

            modelBuilder.Entity("FridgeBot.ServerFridge", b =>
                {
                    b.Navigation("Emotes");

                    b.Navigation("FridgeEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
